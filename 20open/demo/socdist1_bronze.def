include: ../../usaco.def

page: socdist1_bronze
    module: cpp

    &call open_In
        $call scan_Int, N
        $my char *cow_list
        $allocate(N+1) cow_list
        $call scan_str, cow_list

    # $dump N, cow_list

    #---- suvery the available spaces
    $global int end_list[2] = {0} # spaces at 2 ends, larger one first
    $global int top_list[2] = {0} # two largest spaces
    $global int min=100000        # current D
    $my int num_spaces = 0
    $my num_cows = 0
    $for i=0:N
        $if cow_list[i]=='0'
            num_spaces++
        $else
            num_cows++
            $if num_cows==1
                end_list[0] = num_spaces
            $else
                $if min > num_spaces
                    min = num_spaces
            check_tops(num_spaces)
            num_spaces=0
    check_tops(num_spaces)
    $call check_ends, num_spaces

    subcode: check_ends(n)
        $if end_list[0] < $(n)
            end_list[1] = end_list[0]
            end_list[0] = $(n)
        $else
            end_list[1] = $(n)

    #---- enumerate cases ----
    $my int best_plan = 0
    $if num_cows==0
        best_plan = top_list[0]-2
    $else
        # split 3
        $call check_case, (top_list[0]-2)/3
        # split 2
        $call check_case, (top_list[1]-1)/2

        # both_ends
        $call check_case, end_list[1]-1
        # one end and split 2
        $if end_list[0]-1 < (top_list[0]-1)/2
            $call check_case, end_list[0]-1
        $else
            $call check_case, (top_list[0]-1)/2

    subcode: check_case(n)
        $if best_plan < $(n)
            best_plan = $(n)
        # $dump best_plan

    #---- update min ----
    $if min > best_plan
        min = best_plan

    min++
    $dump min
    &call open_Out
        $print $min

fncode: check_tops(n)
    $if top_list[0] < n
        top_list[1] = top_list[0]
        top_list[0] = n
    $elif top_list[1] < n
        top_list[1] = n
    # $call debug

subcode: debug
    # $print "top_list: %d %d, end_list: %d %d, min: %d", top_list[0], top_list[1], end_list[0], end_list[1], min
