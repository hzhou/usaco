include: ../../usaco.def
page: rental_silver, basic_frame
    module: cpp
    namespace: std

    $local N, M, R: int
    &call open_In
        $call scan_int, N, M, R
        $struct(store) int n, int price
        $my int cows[N], store stores[M], int rents[R]
        $for i=0:N
            $call scan_int, cows[i]
        $for i=0:M
            $call scan_int, stores[i].n, stores[i].price
        $for i=0:R
            $call scan_int, rents[i]

    #---------------------------------------
    &call std_sort, cows, N, int
        return a<b
    &call std_sort, stores, M, store
        return a.price>b.price
    &call std_sort, rents, R, int
        return a>b

    # ---- total milk
    $my int total_milk=0
    $for i=0:N
        total_milk+=cows[i]
    $dump N, M, R, total_milk

    # ---- total potential milk money
    $my long long total_money = 0
    $my int j=0
    $while j<M && total_milk>0
        $if total_milk>stores[j].n
            total_money += stores[j].n*stores[j].price
            total_milk-=stores[j].n
            j++
        $else
            stores[j].n = total_milk
            total_money += stores[j].n*stores[j].price
            total_milk = 0
            j++
            break
    j-- # Current milk price set by store j
    k=0
    $for i=0:N
        # ---- Get maximum milk money this cow worth
        $my long long money=0
        $if total_milk > cows[i] 
            # worth nothing
            total_milk -= cows[i]
            cows[i]=0
        $else
            # worth something
            cows[i]-=total_milk
            total_milk = 0

        $if cows[i]>0 # milk worth something
            $while j>=0
                $if cows[i]>stores[j].n
                    cows[i]-=stores[j].n
                    money += stores[j].n * stores[j].price
                    j--
                $else
                    money += cows[i] * stores[j].price
                    stores[j].n -= cows[i]
                    break

        # Shall we rent
        $if k<R && money<rents[k]
            total_money -= money
            total_money += rents[k]
            k++
        $else
            # done!
            break

    # ----------------------------------------
    &call open_Out
        fprintf(Out, "%lld\n", total_money)

