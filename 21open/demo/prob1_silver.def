include: ../../usaco.def
page: prob1_silver
    module: cpp
    exe: cat t/1.in | ./prob1_silver

    $call scan_Int, N

    $my int Maze[N*N]
    # tic-tac-toe move represented by 'Mk' or 'Ok'

    $my s[100]
    $for i=0:N
        $call scan_str, s
        $for j=0:N
            $if s[j*3] == '#' || s[j*3] == 'B' || s[j*3] == '.'
                Maze[i*N+j] = s[j*3]
            $else
                Maze[i*N+j] = s[j*3]*100 + (s[j*3+1] - '1') * 3 + (s[j*3+2] - '1')

    # $call dump_maze
    $my int start_pos = -1
    $for i=0:N*N
        $if Maze[i] == 'B'
            start_pos = i

    #- a state represented by pos-grid, where pos is k in Maze, and grid is a 9-bit mask (in the higher 2 bytes)
    $my std::set<int> cache

    $my std::vector<int> stack
    stack.push_back(start_pos)
    $while stack.size() > 0
        $my int state
        state = stack.back()
        stack.pop_back()
        cache.insert(state)

        $my int mask, int pos
        mask = state >> 16
        pos = state & 0xffff

        $my int next_states[4], int i_next = 0
        $call check_next
        $for j=0:i_next
            $if cache.count(next_states[j]) == 0
                stack.push_back(next_states[j])

    # collect states, dump result            

subcode: dump_maze
    $for i=0:N
        $for j=0:N
            n = Maze[i*N+j]
            $if n < 128
                $print " %c -", n
            $else
                $print "%c%d -", n / 100, n % 100
        $print

