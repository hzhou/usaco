include: ../../usaco.def

page: prob3_silver
    module: cpp
    exe: cat t/1.in | ./prob3_silver

    $call scan_Int, N
    $global int *G
    $allocate(N*N) G
    $for i=0:N*N
        $call scan_int, G[i]

    $my long long ans
    ans = count_min(100) - count_min(101)

    $print "%lld", ans

fncode: count_min(m): long long
    $call new, int, row_counts, N*N
    $for i=0:N  # each row
        cnt = 0
        $for j=0:N
            k = i*N+j
            cnt += (G[k] >= m ? 1 : 0)
            row_counts[k] = cnt
            # $dump i, j, cnt
        
    $local long long count = 0
    $for j1=0:N
        $for j2=j1:N
            n = 0
            $for i=0:N
                is_allones = false
                $if j1==0 && row_counts[i*N+j2]==(j2-j1+1)
                    is_allones = true
                $elif row_counts[i*N+j2] - row_counts[i*N+j1-1] == (j2-j1+1)
                    is_allones = true
                $if is_allones
                    n++
                $else
                    count += n * (n+1) / 2
                    n = 0
            count += n * (n+1) / 2
            # $dump j1, j2, count

    return count
