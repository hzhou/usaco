include: ../../usaco.def
page: milkvisits_silver
    module: cpp

    $call @Input
    $call @build_adj_list
    $my int Ans[M]
    $(if:0)
        $call try_1
    $(else)
        $call try_2
    $call @Output

#---------------------------------------- 
# Two types only need bookkeep one type
subcode: try_2
    $global int i_region = 0
    $call new, int, cache, N
    $for i=0:N
        cache[i]=0
    $for i=0:N
        $if cache[i]==0
            i_region++
            dfs_2(i)

    $for i=0:M
        $if cache[A_list[i]] != cache[B_list[i]]
            # crosses region
            Ans[i] = 1
        $else
            $if types[A_list[i]] == T_list[i]
                Ans[i] = 1
            $else
                Ans[i] = 0

fncode: dfs_2(i)
    $my $(T_vn) stack
    cache[i]=i_region
    stack.push_back(i)
    $while stack.size()>0
        i = stack.back()
        stack.pop_back()
        $foreach j in adj_list[i]
            $if types[i]==types[j]
                $if cache[j]==0
                    cache[j]=i_region
                    stack.push_back(j)

#---------------------------------------- 
subcode: try_1
    $for i=0:M
        Ans[i] = dfs_1(A_list[i], B_list[i], T_list[i])
        $dump i, Ans[i]

fncode: dfs_1(i1, i2, char c)
    $my ans=0
    $call @init_cache
    $my $(T_vn) stack
    $local int state = 0 # whether it matched so far
    $call @push, i1
    $while stack.size()>0
        $call @pop, i
        $foreach j in adj_list[i]
            $call @push, j
        $if ans
            break
    return ans

    subcode: init_cache
        $local int * cache
        cache=new int[N]
        $for i=0:N
            cache[i]=0

    subcode: push(i)
        $if cache[$(i)]==0
            $my int t = state
            $if types[$(i)]==c
                t = 1
            stack.push_back($(i)*2+t)
            cache[$(i)]=1
            $if $(i)==i2
                ans = t

    subcode: pop(i)
        $(i) = stack.back()
        state = $(i) & 1
        $(i) >>= 1
        stack.pop_back()

#---------------------------------------- 
subcode: Input
    &call open_In
        $call scan_Int, N, M
        $call scan_Str, N, types
        $call scan_Int_array, N-1, A, B
        $for i=0:N-1
            A[i]--
            B[i]--
        $call new, int, A_list, M
        $call new, int, B_list, M
        $call new, char, T_list, M
        $for i=0:M
            $my s[2]
            fscanf(In, "%d %d %s", &A_list[i], &B_list[i], s)
            A_list[i]--
            B_list[i]--
            T_list[i]=s[0]

subcode: Output
    &call open_Out,
        $for i=0:M
            $if Ans[i]
                $print 1-
            $else
                $print 0-
        $print "\n"

subcode: build_adj_list
    $call new, $(T_vn), adj_list, N
    $for i=0:N-1
        adj_list[A[i]].push_back(B[i])
        adj_list[B[i]].push_back(A[i])

