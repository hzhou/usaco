include: ../../usaco.def
page: meetings_silver
    module: cpp
    &call open_In
        $call scan_Int, N, L
        $call new, int, W, N
        $call new, int, X, N
        $call new, int, D, N
        $for i=0:N
            $call scan_int, W[i], X[i], D[i]
    #---------------------------------------- 
    $call @sort_by_X
    $call @get_total_weight
    $call @get_T
    # permutaion sort
    $call @P_sort_by_T
    # get the half-weight point
    $call @get_half_weight
    # counting inverses
    # N ~ 5E4, O(N2) suffice
    $my int cnt = 0
    $(if:0)
        # timeout 8+
        $call try_1
    $(else)
        # Realize the condition D[i] = +/- 1
        $call try_2
    $dump cnt
    &call open_Out
        $print $cnt

#---------------------------------------- 
subcode: try_1
    $for i=0:N
        $for j=i+1:N
            $(set:dist=(double)(X[j]-X[i]))
            $(set:vel=(double)(D[i]-D[j]))
            $my double t = -1
            $if $(vel)!=0
                t = $(dist)/$(vel)
            # $dump i, j, t, T[i], T[j], $(dist), $(vel)
            $if t>0 && t<=t_stop && t<abs(T[i]) && t<abs(T[j])
                cnt++

subcode: try_2
    # Realize the condition D[i] = +/- 1
    $my $(T_vn) Q_plus, Q_minus
    $for i=0:N
        $if D[i]>0
            Q_plus.push_back(X[i])
        $else
            Q_minus.push_back(X[i])
    $foreach x in Q_plus
        auto i_lower = std::lower_bound(Q_minus.begin(), Q_minus.end(), x);
        $my double t
        t = (L-x)/1
        $if t>t_stop
            t=t_stop
        auto i_upper = std::upper_bound(Q_minus.begin(), Q_minus.end(), x+t*2);
        cnt += (i_upper - i_lower)

#---------------------------------------- 
subcode: sort_by_X
    $(for:W,X,D)
        $call new, int, t$1, N
        $for i=0:N
            t$1[i] = $1[i]
    $call new, int, P, N
    $for i=0:N
        P[i]=i
    &call std_sort, P, N, int
        return X[a]<X[b]
    $(for:W,X,D)
        $for i=0:N
            $1[i] = t$1[P[i]]

subcode: get_total_weight
    $my int total_weight = 0
    $for i=0:N
        total_weight+=W[i]
    $dump total_weight

subcode: get_T
    $call new, double, T, N
    $for i=0:N
        $if D[i]>0
            T[i] = (double)(L-X[i])/D[i]
        $else
            # negative
            T[i] = (double)(X[i])/D[i]
        # $dump i, X[i], D[i], T[i]

subcode: P_sort_by_T
    $call new, int, P, N
    $for i=0:N
        P[i] = i
    &call std_sort, P, N, int
        return abs(T[a]) < abs(T[b])

subcode: get_half_weight
    i1 = 0
    i2 = N-1
    $my int weight = 0
    $my int i_stop
    $for i=0:N
        $if T[P[i]] < 0
            weight += W[i1++]
        $else
            weight += W[i2--]
        # $dump i, T[P[i]], weight
        $if weight*2 >=total_weight
            i_stop = i
            break

    $my double t_stop = abs(T[P[i_stop]])
    $dump i_stop, t_stop

#---------------------------------------- 
subcode: dump_input
    $for i=0:N
        $dump i, X[i], D[i], W[i]
