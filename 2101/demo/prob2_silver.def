include: ../../usaco.def
page: prob2_silver
    module: cpp
    exe: cat t/2.in | ./prob2_silver

    $call scan_Int, N, Q
    $my s[N+1]
    $call scan_str, s
    $my int A[Q], int B[Q]
    $for i=0:Q
        $call scan_int, A[i], B[i]
        A[i]--
        B[i]--

    $my int Ans[Q]
    $(if:1)
        $call try_binary_search
    $(else)
        $call try_prefix_sum
    # ---- Output ----
    $for q=0:Q
        $print ${Ans[q]}

#---------------------------------------- 
subcode: try_binary_search
    # ---- get Segs ----
    $struct(seg) int a, int b
    $my std::vector<seg> Segs[26]

    $my int start[26]
    $my int last[26]
    $for j=0:26
        start[j] = -1
        last[j] = -1

    $my int cur= s[0] - 'A'
    start[cur] = 0
    last[cur]  = 0
    $for i=1:N
        $my int c = s[i] - 'A'
        $if c < cur
            $for j=cur downto c+1
                $if start[j] != -1
                    Segs[j].push_back((struct seg){start[j], last[j]})
                    start[j] = -1
        $if start[c] == -1
            start[c] = i
        last[c] = i
        cur = c

    $for j=0 to cur
        $if start[j] != -1
            Segs[j].push_back((struct seg){start[j], last[j]})

    # $(set:debug=1)
    $(if:debug)
        $dump s
        $call dump_segs

    # ---- Q ----
    $for q=0:Q
        n = 0
        $(if:debug)
            $dump q, A[q], B[q]
        $for j=0:26
            $if Segs[j].size() == 0
                continue
            $if last[j] == -1
                # never occured
                continue
            i_a = bin_search(Segs[j], A[q])
            i_b = bin_search(Segs[j], B[q])
            n += Segs[j].size()
            n -= (i_b-i_a+1)
            $if Segs[j][i_a].a < A[q]
                n++
            $if Segs[j][i_b].b > B[q]
                n++
            $(if:debug)
                $dump j, i_a, i_b, n
        Ans[q] = n
        $(if:debug)
            $if q==$(debug)
                exit(0)

fncode: bin_search(std::vector<seg>& segs, int a)
    n = segs.size()
    $if segs[0].b >= a
        return 0
    $if segs[n-1].a <= a
        return n-1

    i1 = 0
    i2 = n-1
    $while i1 <= i2
        i3 = (i1 + i2) / 2
        $if segs[i3].b >= a
            i2 = i3 - 1
        $else
            i1 = i3 + 1
    # i2 i1 -   ]<a - a<=]
    return i1

subcode: dump_segs
    $for j=0:26
        $if Segs[j].size() == 0
            continue
        $print "%c: -", 'A' + j
        $foreach a in Segs[j]
            $print "[%d-%d] -", a.a, a.b
        $print

#---------------------------------------- 
subcode: try_prefix_sum
    $my int Front[N]
    $my int Back[N]
