include: ../../usaco.def
page: prob3_bronze
    module: cpp
    exe: cat t/3.in | ./prob3_bronze

    $struct(cow) s[2], int x, int y, int n
    $call scan_Int, N
    $local struct cow * A
    $allocate(N) A
    $for i=0:N
        tn_ret = scanf("%s %d %d", A[i].s, &A[i].x, &A[i].y)
        assert(tn_ret == 3)
        A[i].n = INT_MAX

    $struct(stop) i, j, n
    $local std::vector<stop> stop_list
    $call get_all_stops

    &call stl_sort, stop_list, struct stop
        return a.n < b.n

    $for i=0:stop_list.size()
        $if stop_list[i].n < 0
            continue
        $call update_A_i
        $call remove_stops_of_i
        $call remove_stops_by_i
        # $call debug_stops

    subcode: update_A_i
        A[stop_list[i].i].n = stop_list[i].n
    subcode: remove_stops_of_i
        $for j=i+1:stop_list.size()
            $if stop_list[j].i == stop_list[i].i
                stop_list[j].n = -1
    subcode: remove_stops_by_i
        $for j=i+1:stop_list.size()
            $if stop_list[j].j == stop_list[i].i
                i2 = stop_list[j].i
                j2 = stop_list[j].j
                n2 = stop_list[j].n
                $if A[i2].s[0] == 'E' && A[i2].y > A[j2].y + A[j2].n
                    stop_list[j].n = -1
                $if A[i2].s[0] == 'N' && A[i2].x > A[j2].x + A[j2].n
                    stop_list[j].n = -1

    subcode: debug_stops
        $for j = i:stop_list.size()
            $if stop_list[j].n < 0
                $print "$j:--"
            $else
                $print "$j:(%d,%d-%d) -", stop_list[j].i, stop_list[j].j, stop_list[j].n
        $print

    $for i=0:N
        $include <climits>
        $if A[i].n == INT_MAX
            $print Infinity
        $else
            $print "%d", A[i].n

    subcode: get_all_stops
        $for i=0:N
            $for j=i+1:N
                $if A[i].s[0] == A[j].s[0]
                    continue
                $local n_i, n_j
                $if A[i].s[0] == 'E' && A[j].x > A[i].x && A[i].y > A[j].y
                    n_i = A[j].x - A[i].x
                    n_j = A[i].y - A[j].y
                $elif A[i].s[0] == 'N' && A[j].y > A[i].y && A[i].x > A[j].x
                    n_i = A[j].y - A[i].y
                    n_j = A[i].x - A[j].x
                $else
                    continue

                $if n_i == n_j
                    continue

                n = std::max(n_i, n_j)
                $if n_i == n
                    stop_list.push_back( (struct stop){i, j, n})
                $else
                    stop_list.push_back( (struct stop){j, i, n})
